#!/bin/sh
#
# Copyright 2011 Kevin McIntire, Gianluca Filippini
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not 
# use this file except in compliance with the License. You may obtain a copy 
# of the License at 
#
#    http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License. 
#
#
### BEGIN INIT INFO
# Provides: mongodb
# Required-Start: $network $local_fs
# Required-Stop:
# Should-Start: $named
# Should-Stop:
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: An object/document-oriented database
# Description: MongoDB is a high-performance, open source, schema-free
# document-oriented data store that's easy to deploy, manage
# and use. It's network accessible, written in C++ and offers
# the following features:
#
# * Collection oriented storage - easy storage of object-
# style data
# * Full index support, including on inner objects
# * Query profiling
# * Replication and fail-over support
# * Efficient storage of binary data including large
# objects (e.g. videos)
# * Auto-sharding for cloud-level scalability (Q209)
#
# High performance, scalability, and reasonable depth of
# functionality are the goals for the project.
### END INIT INFO
 
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/home/kevin/src/sandbox/mongodb-linux-i686-1.0.0/bin/mongod
DATA=/mnt/input/db
NAME=MongoDB
DESC=database
 
if test ! -x $DAEMON; then
echo "Could not find $DAEMON"
    exit 0
fi
 
if test ! -x $DATA; then
mkdir $DATA || exit 0
fi
 
. /lib/lsb/init-functions
 
LOGDIR=/var/log/mongodb
PIDFILE=/var/run/$NAME.pid
DIETIME=10
LOGFILE=$LOGDIR/$NAME.log # Server logfile
DAEMON_OPTS="--dbpath $DATA run"
 
if [ -f /etc/default/$NAME ] ; then
. /etc/default/$NAME
fi
 
DAEMONUSER=mongodb
# Check that the user exists (if we set a user)
# Does the user exist?
if [ -n "$DAEMONUSER" ] ; then
if getent passwd | grep -q "^$DAEMONUSER:"; then
        # Obtain the uid and gid
        DAEMONUID=`getent passwd |grep "^$DAEMONUSER:" | awk -F : '{print $3}'`
        DAEMONGID=`getent passwd |grep "^$DAEMONUSER:" | awk -F : '{print $4}'`
    else
log_failure_msg "The user $DAEMONUSER, required to run $NAME does not exist."
        exit 1
    fi
fi
 
set -e
 
 
running_pid() {
# Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] && return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # Is this the expected server
    [ "$cmd" != "$name" ] && return 1
    return 0
}
 
running() {
    [ ! -f "$PIDFILE" ] && return 1
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}
 
start_server() {
    if [ -z "$DAEMONUSER" ] ; then
        start-stop-daemon --background --start --quiet --pidfile $PIDFILE \
            --make-pidfile --exec $DAEMON -- $DAEMON_OPTS
        errcode=$?
    else
        start-stop-daemon --background --start --quiet --pidfile $PIDFILE \
            --make-pidfile --chuid $DAEMONUSER \
            --exec $DAEMON -- $DAEMON_OPTS
        errcode=$?
    fi
    return $errcode
}
 
stop_server() {
    if [ -z "$DAEMONUSER" ] ; then
        start-stop-daemon --stop --quiet --pidfile $PIDFILE
        rm $PIDFILE
        errcode=$?
    else
        start-stop-daemon --stop --quiet --pidfile $PIDFILE \
            --user $DAEMONUSER \
            --exec $DAEMON
        errcode=$?
    fi
 
    return $errcode
}
 
reload_server() {
    [ ! -f "$PIDFILE" ] && return 1
    pid=pidofproc $PIDFILE # This is the daemon's pid
    kill -USR1 $pid
    return $?
}
 
force_stop() {
    [ ! -e "$PIDFILE" ] && return
    if running ; then
        kill -15 $pid
        sleep "$DIETIME"s
        if running ; then
            kill -9 $pid
            sleep "$DIETIME"s
            if running ; then
                echo "Cannot kill $NAME (pid=$pid)!"
                exit 1
            fi
        fi
    fi
    rm -f $PIDFILE
}
 
 
case "$1" in
  start)
        log_daemon_msg "Starting $DESC $NAME"
        if running ; then
            l            log_end_msg 0
            exit 0
        fi
        if start_server ; then
            [ -n "$STARTTIME" ] && sleep $STARTTIME # Wait some time
            if running ; then
                log_end_msg 0
            else
                log_end_msg 1
            fi
        else
            log_end_msg 1
        fi
        ;;
    stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        if running ; then
            errcode=0
            stop_server || errcode=$?
            log_end_msg $errcode
        else
            log_progress_msg "apparently not running"
            log_end_msg 0
            exit 0
        fi
        ;;
    force-stop)
        $0 stop
        if running; then
            log_daemon_msg "Stopping (force) $DESC" "$NAME"
            errcode=0
            force_stop || errcode=$?
            log_end_msg $errcode
        fi
        ;;
    restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        errcode=0
        stop_server || errcode=$?
        [ -n "$DIETIME" ] && sleep $DIETIME
        start_server || errcode=$?
        [ -n "$STARTTIME" ] && sleep $STARTTIME
        running || errcode=$?
        log_end_msg $errcode
        ;;
    status)
        log_daemon_msg "Checking status of $DESC" "$NAME"
        if running ; then
            log_progress_msg "running"
            log_end_msg 0
        else
            log_progress_msg "not running"
            log_end_msg 1
            exit 1
        fi
        ;;
    reload)
        ;;
    *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|force-stop|restart|force-reload|status}" >&2
        exit 1
        ;;
esac

exit 0
 